import React from "react";
import useIsGlxOpen from "../useIsGlxOpen";
import { mount, ReactWrapper } from "enzyme";

// React Hooks can only be invoked inside React functional components.
// Create a placeholder component here for testing purposes
const HookWrapper = (props: { hook: () => any }): any => {
  const hook = props.hook ? props.hook() : undefined;
  return React.createElement("div", { hook: hook }, null);
};

describe("useIsGlxOpen", () => {
  beforeAll(() => {
    // Mock the template element that defines the open stations
    jest.spyOn(document, "querySelector").mockImplementation(
      (selectors: string): HTMLElement => {
        const div = {
          tagName: "DIV",
          className: "glx-stations-open",
          dataset: {
            stations: "place-lech,place-unsqu,place-spmnl",
            opening: "2022-03-21T04:55:00-04:00"
          }
        };
        return (div as unknown) as HTMLElement;
      }
    );
  });

  describe.each`
    stopId           | expectedStatus | expectedOpen
    ${"place-lech"}  | ${true}        | ${"2022-03-21T04:55:00-04:00"}
    ${"place-sstat"} | ${false}       | ${null}
  `("when $stopId", ({ stopId, expectedStatus, expectedOpen }) => {
    let wrapper: ReactWrapper;

    beforeEach(() => {
      wrapper = mount(<HookWrapper hook={() => useIsGlxOpen(stopId)} />);
    });

    afterEach(() => {
      wrapper.unmount();
    });

    it("returns open status and date", () => {
      const [isOpen, openDate] = wrapper.find("div").prop("hook");
      expect(isOpen).toEqual(expectedStatus);
      expect(openDate).toEqual(expectedOpen);
    });
  });
});

test("useIsGlxOpen not open", () => {
  jest.spyOn(document, "querySelector").mockImplementation(
    (selectors: string): HTMLElement => {
      const div = {
        tagName: "DIV",
        className: "glx-stations-open"
      };
      return (div as unknown) as HTMLElement;
    }
  );

  const wrapper = mount(
    <HookWrapper hook={() => useIsGlxOpen("place-sstat")} />
  );
  const [isOpen, openDate] = wrapper.find("div").prop("hook");
  expect(isOpen).toEqual(false);
  expect(openDate).toEqual(null);
});
